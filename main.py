import hangman_art                              # добавляем внешний модуль с картинками
import hangman_words                            # добавляем внешний модуль со словами

import random                                   # Импортируем функцию random, потому что будем использовать рандом при выборе слова

end_of_game = False                             # создаем переменную, чтобы потом запустить WHILE LOOP с этим условием. Присваиваем ей значение False
chosen_word = random.choice(hangman_words.word_list)  # выбираем рандомно слово из импортированного списка
word_length = len(chosen_word)                  # создали переменную, которая будет отображать кол-во символов в выбранном рандомном слове.

lives = 6                                       # создаем переменную, которая отображает кол-во жизней - ходов до проигрыша в игре
#Testing code
#print(f'Pssst, the solution is {chosen_word}.') # выдает нам выбранное слово, чтобы его можно было

print(hangman_art.logo)                         # печатаем лого игры, импортируемое из ранее импортируемого списка картинок.

#Create blanks
display = []                                    # создали пустой список, чтобы его потом наполнить
for _ in range(word_length):                    # с помощью функции FOR LOOP в рэндже (кол-во вукв в выбранном слове), расширяем ранее созданный список display.
    display += "_"                              # к каждому предыдущему значению в список добавляется новое, и так столько раз, сколько в рендже указано кол-во символов в выбранном слове. В итоге создается список из "_" в кол-ве символов из заданного слова.

while not end_of_game:                         # пока это не конец игры будет действовать loop и будет запрашивать новые буквы
    guess = input("Guess a letter: ").lower()  # запрашивает у пользователя букву для дальнейшей проверки. метод lower выводит маленькую букву, внезависимости от того,как ее внес юзер.
    if guess in display:                       # если юзер пишет букву, которую уже ранее выбирал, то проверяем ее наличие в обновленном списке display
      print(f"{guess} - you chose it before")  # выводим сообщение, что ранее эта буква уже была использована

    #Check guessed letter
    for position in range(word_length):        #  метод FOR LOOP в рендже(кол-во символов в выбранном слове) чтобы проверить столько раз совпадение букв рандомного слова с выбранной юзером.
        letter = chosen_word[position]         # создаем переменную letter и присваиваем ей для каждого цикла (loop) расположение символа в заданном слове.
        print(f"Current position: {position}\n Current letter: {letter}\n Guessed letter: {guess}")     # выводит в консоль для справки этого кода все вводные
        if letter == guess:                    # при каждой проверке loop, если letter равняется выбранной юзером, то ...
            display[position] = letter         # если letter равняется выбранной юзером, то позиция в списке display (с нижними подчеркиваниями), меняется на letter (букву, выбранную юзером)
    if guess not in chosen_word :              # выносим левее, чтобы не включался цикл loop и не делал кол-во действий, исходя из word_lenght. Поэтому выносим за выше написанный for loop на тот же уровень, что и for position. Поэтому делает отдельную проверку в исходном рандомном слове и проверяет, находится ли вообще выбранная буква в этом слове. И если True - т.е. выбранная буква не находится в заданном слове, то...
        lives -= 1                             # количество жизней сокраается на 1.
        if lives == 0:                         # если кол-во жизней доходит до 0, то мы должны завершить игру
            end_of_game = True                 # Мы должны выйти из while loop. Т.к. ранее while loop начинался считаться, пока игра не законченана и end_of_game обозначался как False, мы должны изменить переменную на True, чтобы выйти из while loop.
            print("You loose")                 # оповещает о конце игры.
    print(display)

    if "_" not in display:                     # если показатель из изначального списка display "_" закончился (перестал быть в списке display) ...
        end_of_game = True                     # и конец игры наступил. Последний раз для действия Loop
        print("You win")                       # включается конец игры

    print(hangman_art[lives])                      # прописываем появление соответствующей картинки исходя из остатка жизней. Из  импортированного ранее списка stages в [] в консоль выводится текущее кол-во жизней.

